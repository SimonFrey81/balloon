define({
  "sampleUrl": " ",
  "template": {
    "withCompare": false
  },
  "header": {
    "title": "Getting Started",
    "content": "<div id=\"sections\">\n<section id=\"api-general\">\n<h1>General</h1>\n<div id=\"api-general-auth\">\n<article>\n<div class=\"pull-left\">\n<h1>Getting Started</h1>\n</div>\n<div class=\"clearfix\"></div>\n<p>\nBalloon has a full featured HTTP API. You can do pretty much everything with the API. This documentation represents an API\nreference which you can use to include Balloon within your application or even create a new Balloon client app on your own.\nThis API speaks GET, POST, PUT, DELETE and HEAD with you, just select the right HTTP verb for your needs.\n</p>\n<p>\nThe server API core is trimmed to high performance and will process your requests within a few milliseconds.\nBut this is somehow related with your request. Not every type of request performs as good as others. \nFor example, pretty much every action requires either a parameter \"id\" or a parameter \"p\" (which stands for path).\nRequests with \"path\" would take longer, since the server needs to resolve the path until your requsted node is found.\nWhile you pass an id instead a path, the server is able to request the node 1:1 from its backend database. \nAs you can see, if it is possible, you should go with id and forget about file paths. There are also some parameters which \ncan reduce performance for example if your attach the \"pretty\" parameter to a request the server will perform slower than without \nor if your request more attributes like \"path\".\n</p>\n<p>\nThis reference does use a placeholder called https://SERVER/api/v1, whereas SERVER should be replaced with your actual server name.\nThe Balloon API is always placed under /api on the server. So an example URL could be,\nhttps://mycloud.com/api/v1.\n</p>\n</article>\n<article>\n<div class=\"pull-left\">\n<h1>Authentication</h1>\n</div>\n<div class=\"clearfix\"></div>\n<p>\nYou can choose between two authentication methods. The first one is the classical basic HTTP authentication. With this kind of method you have to send the credentials\n(username / password) base64 encoded in a header called Authorization.\nSince this is a stateless HTTP API you will need to send the authentication information with every request.\n</p>\n<pre class=\"prettyprint prettyprinted\" style=\"\"><code>curl -u \"username:password\" https://SERVER/api/v1\n#Curl builds the basic http auth header automatically if you post your credentials within the option -u\n#This is pretty much the same as curl -H \"Authorization: Basic $(echo username:password | base64 -e)\" https://SERVER/api/v1</code></pre>\n<p>\nThe seccond possible authentication method is OAUTH2. The big adventages of OAUTH2 is, you don't have to send username/password with every request. Instead you have to send an access token, \nwhich allows a user to use a service. In this case the service Balloon. This type of token is an HTTP Bearer token, which you have to attach to the http stack.\n</p>\n<pre class=\"prettyprint prettyprinted\" style=\"\"><code>curl -H \"Authorization: Bearer access_token\" https://SERVER/api/v1\n#While access_token is your valid access_token, which you get from your OAUTH2 authorization server.</code></pre>\n<p>\nIn both cases you should get back HTTP OK 200 from https://SERVER/api/v1. If this is not the case, you're doing something wrong.\nThe HTTP basic authentication method is way more simpler, but if you have the choice and it does not matter which one you choose, \nthen you should go with OAUTH2. It is more secure and there are no credentials attached to requests on the wire.\n</p>\n</article>\n<article>\n<div class=\"pull-left\">\n<h1>Response</h1>\n</div>\n<div class=\"clearfix\"></div>\n<p>\nThe  API is able to respond with two different formats. You can either request a JSON based body or an XML one.\nJSON is normally preffered and is set as the default. So you don't have to specify the Accept header if you which to receive JSON.\n<p>For request an XML based response, your can attach an Accept header to your request:</p>\n</p>\n<pre class=\"prettyprint prettyprinted\" style=\"\"><code>curl -H 'Accept: application/xml' https://SERVER/api/v1</code></pre>\n<p>\nYou can even request both with a nicely formatted output:\n(But keep in mind that this will use more calculation time on the API server, you should not use this parameter within your stable application)\n</p>\n<pre class=\"prettyprint prettyprinted\" style=\"\"><code>curl -H 'Accept: application/xml' https://SERVER/api/v1?pretty\ncurl -H 'Accept: application/json' https://SERVER/api/v1?pretty\n</code></pre>\n</article>\n<article>\n<div class=\"pull-left\">\n<h1>Request</h1>\n</div>\n<div class=\"clearfix\"></div>\n<p>\nInstead attaching your parameters to the query string, you can send them as a JSON (or of course XML as you wish) attached to your API request. You just need to specify that you \nsend actually JSON or XML to the API. In that case you have to specify the Content-Type header.\n</p>\n<pre class=\"prettyprint prettyprinted\" style=\"\"><code>curl -u \"user:pw\" -XGET -H 'Content-Type: application/json' https://SERVER/api/v1/collection/children \n-d '{\"attributes\":[\"mime\"]}'</code></pre>\n</article>\n<article>\n<div class=\"pull-left\">\n<h1>Exception-Handling</h1>\n</div>\n<div class=\"clearfix\"></div>\n<p>\n<p>\nThe Api will throw various different Exceptions if they can not be handled by the application itself.\nException response primarily come with an HTTP status code of 4xx or 5xx. A successful response usually comes\nwith HTTP 2xx.\n<p>An error response always comes with an HTTP status code, an error message, the exception type and an error code.\n(Exceptions of type \\Balloon\\Exception usually do not have an error code). It can also bet that multiple exceptions get thrown\nan the error response will contain an array of exceptions. This will be the case if the API gets requested with actions for multiple resources\ninstead just one.</p>\n</p>\n<p><h5>Example of an exception of type \\Balloon\\Exception\\NotFound response</h5></p>\n<pre class=\"prettyprint prettyprinted\" style=\"\"><code>HTTP/1.1 404 Not Found\n{\n    \"status\": 404,\n    \"data\": {\n        \"error\": \"Balloon\\\\Exception\\\\NotFound\",\n        \"message\": \"node 51354d073c58891f058b4580 not found\",\n        \"code\": 50\n    }\n}\n</code></pre>\n<p><h5>Example of an exception of type \\Balloon\\Exception\\Conflict from a multi resouce request</h5></p>\n<pre class=\"prettyprint prettyprinted\" style=\"\"><code>HTTP/1.1 400 Bad Request\n{\n    \"status\": 400,\n    \"data\": [\n        {\n             id: \"51354d073c58891f058b4580\",\n             name: \"file.zip\",\n             error: \"Balloon\\\\Exception\\\\Conflict\",\n             message: \"node already exists\",\n             code: 30\n        }\n    ]\n}\n</code></pre>\n<p><h5>Custom error codes for exceptions of type \\Balloon\\Exception\\Conflict</h5></p>\n<p>Exceptions with type \\Balloon\\Exception\\Conflict will come with an HTTP error code 400</p>\n<ul>\n     <li>ALREADY_THERE                      = 0x11</li>\n     <li>CANT_BE_CHILD_OF_ITSELF            = 0x12</li>\n     <li>NODE_WITH_SAME_NAME_ALREADY_EXISTS = 0x13</li> \n     <li>SHARED_NODE_CANT_BE_CHILD_OF_SHARE = 0x14</li> \n     <li>DELETED_PARENT                     = 0x15</li> \n     <li>NODE_CONTAINS_SHARED_NODE          = 0x16</li> \n     <li>PARENT_NOT_AVAILABLE_ANYMORE       = 0x17</li> \n     <li>NOT_DELETED                        = 0x18</li>\n     <li>READONLY                           = 0x19</li> \n     <li>CANT_COPY_INTO_ITSELF              = 0x110</li> \n     <li>NOT_SHARED                         = 0x111</li> \n     <li>CAN_NOT_DELETE_OWN_ACCOUNT         = 0x112</li> \n     <li>CHUNKS_LOST                        = 0x113</li>\n     <li>CHUNKS_INVALID_SIZE                = 0x114</li>\n     <li>INVALID_OFFSET                     = 0x115</li>\n</ul>\n<p><h5>Custom error codes for exceptions of type \\Balloon\\Exception\\Forbidden</h5></p>\n<p>Exceptions with type \\Balloon\\Exception\\Forbidden will come with an HTTP error code 403</p>\n<ul>\n     <li>NOT_ALLOWED_TO_RESTORE   = 0x21</li>\n     <li>NOT_ALLOWED_TO_DELETE    = 0x22</li>\n     <li>NOT_ALLOWED_TO_MODIFY    = 0x23</li>\n     <li>NOT_ALLOWED_TO_OVERWRITE = 0x24</li>\n     <li>NOT_ALLOWED_TO_SHARE     = 0x25</li>\n     <li>NOT_ALLOWED_TO_CREATE    = 0x26</li>\n     <li>NOT_ALLOWED_TO_MOVE      = 0x27</li>\n     <li>NOT_ALLOWED_TO_ACCESS    = 0x28</li>\n     <li>ADMIN_PRIV_REQUIRED      = 0x29</li>\n     <li>NOT_ALLOWED_TO_UNDELETE  = 0x210</li>\n</ul>\n<p><h5>Custom error codes for exceptions of type \\Balloon\\Exception\\NotFound</h5></p>\n<p>Exceptions with type \\Balloon\\Exception\\NotFound will come with an HTTP error code 404</p>\n<ul>\n     <li>NODE_NOT_FOUND        = 0x31</li> \n     <li>SHARE_NOT_FOUND       = 0x32</li>\n     <li>REFERENCE_NOT_FOUND   = 0x33</li> \n     <li>NOT_ALL_NODES_FOUND   = 0x34</li>\n     <li>USER_NOT_FOUND        = 0x35</li> \n     <li>DESTINTAION_NOT_FOUND = 0x36</li> \n     <li>PARENT_NOT_FOUND      = 0x37</li> \n     <li>PREVIEW_NOT_FOUND     = 0x38</li> \n     <li>CONTENTS_NOT_FOUND    = 0x39</li> \n</ul>\n</article>\n</div>\n</section>\n</div>\n"
  },
  "name": "Balloon",
  "version": "1.0.11",
  "description": "",
  "apidoc": "0.2.0",
  "generator": {
    "name": "apidoc",
    "time": "2017-06-20T14:02:40.532Z",
    "url": "http://apidocjs.com",
    "version": "0.16.1"
  }
});

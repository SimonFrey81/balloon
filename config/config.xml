<config version="1.0">
<production>
  <!--
    - MongoDB
    -
    - mongodb.db: The mongodb balloon db name
    - mongodb.server: MongoDB connection URI @see http://docs.mongodb.org/manual/reference/connection-string/
    -->
    <mongodb>
        <db>cloudfs</db>
        <server>mongodb://localhost:27017</server>
    </mongodb>

  <!--
    - Apps (Extensions) 
    -
    - Balloon is easly extendable, just add  a new app here.
    - Apps get injected in the given order.
    -
    - apps[].enabled: [1|0]
    - apps[].class: app bootstrap class
    - apps[].confog[]: app specific configurations 
    -->
    <apps>
        <Api enabled="1" class="\Balloon\App\Api">
            <config/>
        </Api>

        <Webdav enabled="1" class="\Balloon\App\Webdav">
            <config/>
        </Webdav>

        <Sharelink enabled="1" class="\Balloon\App\Sharelink">
            <config/>
        </Sharelink> 
    
        <elasticsearch enabled="1" class="\Balloon\App\Elasticsearch">
            <config>
                <hosts>
                    <server>http://localhost:9200</server>
                </hosts>
                <index>balloon</index> 
            </config>
        </elasticsearch>

      <!--
        - Preview generator
        - 
        - This plugin automatically creates previews of new or changed files.
        -->
        <preview enabled="1" class="\Balloon\App\Preview">
            <config>
                <imagick class="\Balloon\Preview\Imagick">
                    <config>
                        <max_size>300</max_size> 
                    </config>
                </imagick>
                <office class="\Balloon\Preview\Office">
                    <config>
                        <max_size>300</max_size>
                        <timeout>10</timeout>
                        <tmp>/tmp/balloon</tmp>
                        <soffice>/usr/bin/soffice</soffice>
                    </config>
                </office>
            </config>
        </preview>

      <!--
        - Mail notifications
        - 
        - Its possible with this plugin to send mail notifications after certain events happened.
        -->
        <notify enabled="1" class="\Balloon\App\Notification">
            <config>
                <notifications>
                    <new_share enabled="1">
                        <config>
                            <body>{shareowner} added a new share {name} to your cloud.</body>
                            <subject>Balloon: A new share has been added to your cloud</subject>
                            <sender>
                                <address>no-reply@localhost</address>
                                <name>Balloon</name>
                            </sender>
                        </config>
                    </new_share>
                </notifications>            
            </config>
        </notify>

      <!--
        - Auto node destroyer
        - 
        - This plugin automatically removed node with an expired destroy timestamp. 
        - Usually this plugin is disabled in this configuration but enabled in cli.xml.
        - This plugin has no configuration options.
        -->
        <destroyer enabled="0" class="\Balloon\App\Destroyer">
             <config/>
        </destroyer>

      <!--
        - Delta
        - 
        - This plugin is used to log all user events (also required if you need the delta API endpoint).
        - This plugin has no configuration options.
        -->
        <delta enabled="1" class="\Balloon\App\Delta">
            <config/>
        </delta>

      <!--
        - Temp directory cleaner
      
        - plugin[].config.dir: The temorary directory to clean up (usually the same as dir.temp)
        - plugin[].config.force_check_owner: UID of the webserver owner (Will only remove files which match this configured owner)
        - plugin[].config.max_age: Files older than than max_age in seconds will be removed
        -->
        <clean_temp enabled="0" class="\Balloon\App\CleanTemp">
            <config>
                <dir>/tmp/balloon</dir>
                <force_check_owner>33</force_check_owner>
                <max_age>3600</max_age>
            </config>
        </clean_temp>

      <!--
        - Auto trash cleaner
        - 
        - plugin[].config.max_age: After how many secconds a deleted node gets removed completely
        -->
        <clean_trash enabled="0" class="\Balloon\App\CleanTrash">
            <config>
                <max_age>2592000</max_age>
            </config>
        </clean_trash>
      
        <!--
        - Initial user attributes (Auto create user)
        -
        - This plugin is only useful if you are using anything else than Auth\Adapter\Db to authenticate users.
        - With this plugin you can set default user values but only during creating the user.
        - Afterwards the user attribute map will override those values if an attribute was configured in the map.
        -->
        <auto_create_user enabled="0" class="\Balloon\App\AutoCreateUser">
            <config>
                <attributes>
                    <soft_quota type="int" value="10000000"/>
                    <hard_quota type="int" value="10000000"/>
                </attributes>
            </config>
        </auto_create_user>

      <!--
        - Auto shares from LDAP
        -
        - You can automatically create shares based on ldap groups&membership.
        - 
        - plugin[].config.ldap.host : LDAP connection URI
        - plugin[].config.ldap.port : LDAP port
        - plugin[].config.ldap.basedn : LDAP basedn
        - plugin[].config.ldap.username : LDAP bind user
        - plugin[].config.ldap.password : LDAP bind password
        - plugin[].config.ldap.tls : [1|0]
        - plugin[].config.ldap.options[]: LDAP protocol option @see http://php.net/manual/en/function.ldap-set-option.php
        -     Example: <option attr="LDAP_OPT_PROTOCOL_VERSION" value="3"/>
        - plugin[].config.auto_delete : [1|0] auto delete enabled/disabled, will remove created auto shares automaticall if the ldap filter does not match anymore
        - plugin[].config.shares[].share_owner : The owner for the automatic share (Could be any username or just SYSTEM)
        - plugin[].config.shares[].subfolder_attr : Shares will be grouped under a automatic subfolder (For example this could be the attribute "organization")
        - plugin[].config.shares[].acl[].type : ACL rule type
        -     user => the acl rule is user based 
        -     group => the acl rule is group based
        -  plugin[].config.shares[].acl[].priv : ACL privilege for share members
        -     r => Read-Only access
        -     w => Write-Only access
        -     rw => Full access
        -     w+ => Write-Only (Owned files are readable)
        - plugin[].config.shares[].acl[].role_attr : LDAP user identifier attribute (usually dn for user based rules and member for group based rules)
        - plugin[].config.shares[].filter : The LDAP filter which is used for searching auto share objects
        - plugin[].config.shares[].share_name : LDAP attribute will be taken as the share name (For example the commonName)
        -->
        <auto_share enabled="1" class="\Balloon\App\LdapAutoShare">
            <config>
                <ldap>
                    <host>ldap.example.org</host>
                    <port>389</port>
                    <basedn>ou=shares,dc=example,dc=org</basedn>
                    <username>uid=bind,dc=example,dc=org</username>
                    <password>1234</password>
                    <tls>1</tls>
                    <options>
                        <option attr="LDAP_OPT_PROTOCOL_VERSION" value="3"/>
                    </options>
                </ldap>
                <auto_delete>1</auto_delete>
                <shares>
                    <share1>
                        <share_owner>SYSTEM</share_owner>
                        <subfolder_attr>o</subfolder_attr>
                        <acl>
                            <rule1>
                                <type>group</type>
                                <priv>r</priv>
                                <role_attr>dn</role_attr>
                            </rule1>
                            <rule2>
                                <type>user</type>
                                <priv>rw</priv>
                                <role_attr>member</role_attr>
                                <user_attr>ldapdn</user_attr>
                            </rule2>
                        </acl>
                        <filter>(&amp;(objectClass=groupOfNames)(cn=*))</filter>
                        <share_name>cn</share_name>
                    </share1>
                </shares>
            </config>    
        </auto_share>
    </apps>

  <!--
    - Mail
    -
    - mail.class: https://zendframework.github.io/zend-mail/ to get possible mail transporter
    - mail.config[]: mail transport adapter sepcific settings
    -->
    <mail class="\Zend\Mail\Transport\Sendmail">
         <config/>
    </mail>


  <!--
    - Log
    -
    - log[].enabled: [1|0]
    - log[].class: Log adapter
    -    \Micro\Log\Adapter\File   => Send to file
    -    \Micro\Log\Adapter\Syslog => Send to syslog
    -    \Micro\Log\Adapter\Stdout => Send to stdout
    - log[].format: log format string, combine multiple placeholder to form a log message
    -    %date%    => Date/Time @see date_format
    -    %context% => Context logging options
    -    %message% => Log message
    -    %level%   => Log level
    - log[].level: log level
    -    0 => emerg
    -    1 => alert
    -    2 => crit
    -    3 => err
    -    4 => warn
    -    5 => notice
    -    6 => info
    -    7 => debug
    -->
    <log>
      <!--
        - File output
        -
        - This log adapter sends log messages to a file.
        -->
        <file enabled="1" class="\Micro\Log\Adapter\File">
            <config>
                <file>APPLICATION_PATH/log/out.log</file>
                <date_format>Y-d-m H:i:s</date_format>
                <format>{date} [{context.category},{level}]: {message} {context.params} {context.exception}</format>
                <level>7</level>
            </config>
        </file>
        
      <!--
        - Stdout output
        -
        - This log adapter sends log messages to stdout (Usually only useful for cli)
        -->
        <stdout enabled="0" class="\Micro\Log\Adapter\Stdout">  
            <config>
                <date_format>Y-d-m H:i:s</date_format>
                <format>{date} [{context.category},{level}]: {message} {context.params} {context.exception}</format>
                <level>7</level>
            </config>
        </stdout>
        
      <!--
        - Syslog
        -
        - This log adapter sends log messages to syslog.
        -->
        <syslog enabled="0" class="\Micro\Log\Adapter\Syslog">  
            <config>
                <date_format>Y-d-m H:i:s</date_format>
                <format>{date} [{context.category},{level}]: {message} {context.params} {context.exception}</format>
                <level>7</level>
                <ident>balloon</ident>
            </config>
        </syslog>
    </log>

  <!--
    - Temp
    -
    - dir.temp: Temporary folder
    -->
    <dir>
        <temp>/tmp/balloon</temp>
    </dir>
    
  <!--
    - File options
    -
    - file.max_version: As soon as a specific version is hit, then balloon will beginn to overwrite versions from the beginning
    - file.max_size: The maximum allowed file size (Attention there are some other limits which could take effect like Webserver max body oder PHP memory limits)
    -->
    <file>
        <max_version>8</max_version>
        <max_size>1073741824</max_size>
    </file>

  <!--
    - Authentication
    - 
    - auth.adapter[].enabled: [1|0]
    - auth.adapter[].class: The authentication class
    -    \Balloon\Auth\Adapter\Basic\Db: Local user stored in MongoDB
    -    \Balloon\Auth\Adapter\Basic\Ldap: LDAP based authentication
    -    \Balloon\Auth\Adapter\Oauth2: OAUTH2 authentication
    -    \Balloon\Auth\Adapter\Preauth: Pre exchanged key authentication (Avoid using this class, use Oauth2 instead!)
    -->
    <auth>
        <adapter>
          <!--
            - Local Users
            -
            - This adapter does not require any special configurations.
            -->
            <basic_db enabled="1" class="\Balloon\Auth\Adapter\Basic\Db">
                <config/>
            </basic_db>

          <!--
            - Authenticate via OAUTH2 Authorization server
            -
            - auth.adapter[].auth_server: OAUTH2 authorziation endpoint
            - auth.adapter[].client_id: OAUTH2 client id
            - auth.adapter[].client_secret: OAUTH2 client secret
            -->
            <oauth2 enabled="0" class="\Balloon\Auth\Adapter\Oauth2">
                <config>
                    <auth_server>https://oauth.example.org/validate</auth_server>
                    <client_id>YOUR_OAUTH_CLIENT_ID</client_id>
                    <client_secret>YOUR_OAUTH_CLIENT_SECRET</client_secret>
                </config>
            </oauth2>

          <!--
            - Preauth with LDAP Account and preauth key
            -
            - This adapter should be avoided. Use OAUTH2 instead.
            -
            - @deprecated
            -->
            <preauth enabled="0" class="\Balloon\Auth\Adapter\Preauth">
                <config>
                    <key>random_pre_auth_key</key>
                    <source>
                        <lan>192.168.1.0/24</lan>
                        <localhost>127.0.10.1</localhost>
                    </source>
                    <ldap inherits="auth.adapter.basic_ldap.config.ldap"/>
                    <map inherits="auth.adapter.basic_ldap.config.map"/>
                    <account_filter>(uid=%s)</account_filter>
                    <attr_sync_cache>3600</attr_sync_cache>
                </config>
            </preauth>
          
          <!--
            - Authenticate via LDAP
            -
            - auth.adapter[].config.ldap.host: LDAP connection URI
            - auth.adapter[].config.ldap.port: LDAP port
            - auth.adapter[].config.ldap.basedn: LDAP basedn
            - auth.adapter[].config.ldap.username: LDAP bind user
            - auth.adapter[].config.ldap.password: LDAP bind password
            - auth.adapter[].config.ldap.tls: [1|0]
            - auth.adapter[].config.ldap.options[]: LDAP protocol option @see http://php.net/manual/en/function.ldap-set-option.php
            -    Example: <option attr="LDAP_OPT_PROTOCOL_VERSION" value="3"/>
            - auth.adapter[].config.ldap.attr_sync_cache: After how many secconds the attributes in the db get synchronised with those from LDAP
            - auth.adapter[].config.ldap.account_filter: LDAP filter which is used to find the user object (%s gets replaced with the username)
            - auth.adapter[].config.ldap.map[] : Map LDAP user attributes to balloon user attributes
            -    Examples:  
            -        <groups type="array" attr="memberof"/> groups is the balloon attribute name and memberof the ldap one
            -        <hard_quota type="int" attr="balloonhardquota"/> hard_qutoa is the balloon attribute name and balloonhardquota the ldap one (custom ldap attribute)
            -    
            -    Balloon operational attributes (You can map other attributes as well but the following have operational effects):
            -        soft_quota : soft user quota,
            -        hard_qutoa : hard user quota
            -        deleted : is true if the user is actually deleted (or rather disabled)
            -        groups[] : Array of groups the user is member of
            -        mail : mail adress
            -        avatar : Profile picture
            -        ldapdn : User LDAP DN
            -->
            <basic_ldap enabled="0" class="\Balloon\Auth\Adapter\Basic\Ldap">
                <config>
                    <ldap>
                        <host>ldap.example.org</host>
                        <port>389</port>
                        <basedn>dc=example,dc=org</basedn>
                        <username>uid=bind,dc=example,dc=org</username>
                        <password>1234</password>
                        <tls>1</tls>
                        <options>
                            <option attr="LDAP_OPT_PROTOCOL_VERSION" value="3"/>
                        </options>
                    </ldap>        
                    <account_filter>(uid=%s)</account_filter>
                    <attr_sync_cache>3600</attr_sync_cache>

                  <!--
                    - LDAP share resources
                    - 
                    . Besides finding local users/groups you can define ldap resoures. If you share a node
                    - you will be able to find users which exists not only in the db but on an LDAP Server as well.
                    -
                    - You are able to work with namespaces in an ldap directory for searching acl roles.
                    - This is only useful if you got multiple organizations in one directory tree, another option is to create an
                    - authentication class for each suborganization (just with another basedn).
                    - You don't have to configure namespaces if you got just one organization in one basedn.
                    -
                    - If an attribute mapping named "namespace" exists and the authenticated user has this attribute, another basedn could be used
                    - for searching acl roles.
                    -    
                    - Example: 
                    - There are multiple subtrees in an ldap DIT like:
                    -    o=firm1,dc=example,dc=org
                    -    o=firm2,dc=example,dc=org
                    -
                    - Every user under these organization objects got an attribute "o" for the right organization:
                    -    uid=user1,o=firm1,dc=example,dc=org Attrs: o=firm1
                    -    uid=user1,o=firm2,dc=example,dc=org Attrs: o=firm2
                    -
                    - Now you can create an attribute mapping:
                    -    <namespace type="string" attr="o"/>
                    - 
                    - And create a basedn which includes this namespace (Attention, use the basedn configuration under </search>!):
                    -    <basedn>o=%s,dc=example,dc=org</basedn>
                    -->
                    <ldap_resources>
                        <ldap inherits="auth.adapter.basic_ldap.config.ldap"/>
                        <basedn>dc=example,dc=org</basedn>
                        <user>
                            <filter>(&amp;(objectClass=Person)(uid=%s*)(o=%s))</filter>
                            <filter_single>(uid=%s)</filter_single>
                            <id_attr>uid</id_attr>
                            <display_attr>uid</display_attr>
                        </user>
                        <group>
                            <filter>(&amp;(objectClass=groupOfNames)(cn=%s*))</filter>
                            <filter_single>(entryDN=%s)</filter_single>
                            <id_attr>dn</id_attr>
                            <display_attr>cn</display_attr>
                        </group>
                    </ldap_resources>

                    <map>
                        <namespace type="string" attr="o"/>
                        <avatar type="binary" attr="jpegPhoto"/>
                        <hard_quota type="int" attr="customHardQuotaAttribute"/>
                        <soft_quota type="int" attr="customSoftQuotaAttribute"/>
                        <groups type="array" attr="memberof"/>
                        <mail type="string" attr="mail"/>
                        <ldapdn type="string" attr="dn"/>
                    </map>
                </config>
            </basic_ldap>
        </adapter>
    </auth>
</production>
</config>
